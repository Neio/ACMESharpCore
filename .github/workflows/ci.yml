name: CI

on:
  push:
    branches:
    - master
    - github-workflow

jobs:
  build:
    strategy:
      matrix:
        os:
        - 'ubuntu-latest'
        - 'windows-latest'

    runs-on: ${{ matrix.os }}

    steps:
    - name: Prep CI
      id: prep_ci
      shell: pwsh
      env:
        MATRIX_OS: ${{ matrix.os }}
      run: |
        Install-Module GitHubActions -Force
        Install-Module AWSPowerShell.NetCore -Force

        Import-Module GitHubActions

        $matrix_os = $env:MATRIX_OS
        if ([string]::IsNullOrWhiteSpace($matrix_os)) { $matrix_os = 'unknown' }
        $os_label = $matrix_os.Split('-')[0]

        Write-ActionInfo "Resolved `$env:OS_LABEL as [$os_label]"
        Set-ActionVariable -Name OS_LABEL -Value $os_label
        Set-ActionOutput   -Name os_label -Value $os_label

    - name: Checkout latest
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 8.*

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore
      #run: dotnet build --configuration Release

    - name: Prepare for Tests
      id: prep_tests
      env:
        TEST_BUCKET_NAME: ${{ secrets.TEST_BUCKET_NAME }}
        TEST_HOSTED_ZONE_ID: ${{ secrets.TEST_HOSTED_ZONE_ID }}
        TEST_AWS_ACCESS_KEY: ${{ secrets.TEST_AWS_ACCESS_KEY }}
        TEST_AWS_SECRET_KEY: ${{ secrets.TEST_AWS_SECRET_KEY }}
      shell: pwsh
      run: |
        $configRoot      = "./test/ACMESharp.IntegrationTests/config"
        $configOutRoot   = [System.IO.Path]::Combine($configRoot, "_IGNORE")
        $configTemplates = [System.IO.Path]::Combine($configRoot, "template-*")
        $configValues    = [System.Environment]::GetEnvironmentVariables()

        if (-not (Test-Path -PathType Container $configOutRoot)) {
            mkdir $configOutRoot
        }

        ## For each config template, do a @@ENV_VAR@@ substitution
        ## as we write out the realized template to the config dir
        foreach ($f in (dir $configTemplates)) {
            $fOut = $f.FullName -replace '[\\/]template-','/_IGNORE/'
            $fBody = [System.IO.File]::ReadAllText($f.FullName)
            foreach ($k in $configValues.Keys) {
                $fBody = $fBody -replace "@@$k@@",$configValues[$k]
            }
            [System.IO.File]::WriteAllText("$($fOut)", $fBody)
        }

        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        #if ($isLinux) {
        #    & sudo pwsh -C "Install-Module AWSPowerShell.NetCore -Force"
        #}
        #else {
        #    Install-Module AWSPowerShell.NetCore -Force
        #}

        Import-Module AWSPowerShell.NetCore -Force
        Set-AWSCredential -StoreAs acmesharp-tests -AccessKey $env:TEST_AWS_ACCESS_KEY -SecretKey $env:TEST_AWS_SECRET_KEY

        #dotnet msbuild /t:clean
        #dotnet msbuild /t:restore
        #dotnet msbuild /t:build
        #dotnet msbuild /t:publish

        #dotnet pack src/ACMESharp
        #dotnet pack src/ACMESharp.DotNetCore
        #dotnet pack src/ACMESharp.MockServer
        #dotnet pack src/PKISharp.SimplePKI

    ## These are each separated out so we can better
    ## distinguish, isolate and navigate the results
    ## and each will always execute regardless of the
    ## result of any preceding test as long as

    #- name: Test - Unit Tests
    #  id: unitTests
    #  if: ${{ !cancelled() }}
    #  shell: pwsh
    #  run: |
    #    dotnet test --no-restore --verbosity normal --results-directory ./_IGNORE --logger "trx;LogFileName=_gh-tests.trx" ./test/ACMESharp.UnitTests
    #    #./tools/test-report/trx2md.ps1 -trxFile ./_IGNORE/_gh-tests.trx -Verbose

    #- name: Test - SimplePKI Unit Tests
    #  id: simplePkiUnitTests
    #  if: ${{ !cancelled() }}
    #  shell: pwsh
    #  run: dotnet test --no-restore --verbosity normal ./test/PKISharp.SimplePKI.UnitTests

    #- name: Test - MockServer Unit Tests
    #  id: mockServerUnitTests
    #  if: ${{ !cancelled() }}
    #  shell: pwsh
    #  run: dotnet test --no-restore --verbosity normal ./test/ACMESharp.MockServer.UnitTests

    #- name: Test - Integration Tests
    #  id: integrationTests
    #  if: ${{ !cancelled() && steps.unitTests.outcome == 'success' && steps.mockServerUnitTests.outcome == 'success' && steps.simplePkiUnitTests.outcome == 'success' }}
    #  continue-on-error: true
    #  shell: pwsh
    #  run: |
    #    ipmo GitHubActions
    #    Write-ActionInfo "Results of preceding Tests:"
    #    Write-ActionInfo "  * unitTests..............: ${{ steps.unitTests.outcome }}"
    #    Write-ActionInfo "  * mockServerUnitTests....: ${{ steps.mockServerUnitTests.outcome }}"
    #    Write-ActionInfo "  * simplePkiUnitTests.....: ${{ steps.simplePkiUnitTests.outcome }}"

    #    dotnet test --no-restore --verbosity normal ./test/ACMESharp.IntegrationTests

    - name: Test - Unit Tests
      id: unit_tests
      if: ${{ !cancelled() && steps.prep_tests.outcome == 'success' }}
      uses: zyborg/dotnet-tests-report@v1
      with:
        project_path: ./test/ACMESharp.UnitTests
        no_restore: true
        report_name: unit_tests_${{ steps.prep_ci.outputs.os_label }}
        report_title: ACMESharp Core - Base Unit Tests
        github_token: ${{ secrets.GITHUB_TOKEN }}
        gist_name: acmesharpcore-unit_tests-${{ steps.prep_ci.outputs.os_label }}.md
        gist_badge_label: 'Base Unit Tests: %Counters_passed%/%Counters_total%'
        gist_token: ${{ secrets.GIST_TOKEN }}

    - name: Test - SimplePKI Unit Tests
      id: simplepki_unit_tests
      if: ${{ !cancelled() && steps.prep_tests.outcome == 'success' }}
      uses: zyborg/dotnet-tests-report@v1
      with:
        project_path: ./test/PKISharp.SimplePKI.UnitTests
        no_restore: true
        report_name: simplepki_unit_tests_${{ steps.prep_ci.outputs.os_label }}
        report_title: ACMESharp Core - SimplePKI Unit Tests
        github_token: ${{ secrets.GITHUB_TOKEN }}
        gist_name: acmesharpcore-simplepki_unit_tests-${{ steps.prep_ci.outputs.os_label }}.md
        gist_badge_label: 'SimplePKI Unit Tests: %Counters_passed%/%Counters_total%'
        gist_token: ${{ secrets.GIST_TOKEN }}

    - name: Test - MockServer Unit Tests
      id: mockserver_unit_tests
      if: ${{ !cancelled() && steps.prep_tests.outcome == 'success' }}
      uses: zyborg/dotnet-tests-report@v1
      with:
        project_path: ./test/ACMESharp.MockServer.UnitTests
        no_restore: true
        report_name: mockserver_unit_tests_${{ steps.prep_ci.outputs.os_label }}
        report_title: ACMESharp Core - MockServer Unit Tests
        github_token: ${{ secrets.GITHUB_TOKEN }}
        gist_name: acmesharpcore-mockserver_unit_tests-${{ steps.prep_ci.outputs.os_label }}.md
        gist_badge_label: 'MockServer Unit Tests: %Counters_passed%/%Counters_total%'
        gist_token: ${{ secrets.GIST_TOKEN }}

    - name: Unit Test Results Dump
      if: ${{ !cancelled() && steps.prep_tests.outcome == 'success' }}
      continue-on-error: true
      shell: pwsh
      run: |
        ipmo GitHubActions
        Write-ActionInfo "Results of preceding Tests:"
        Write-ActionInfo "  * unit_tests...............: ${{ steps.unit_tests.outcome }}"
        Write-ActionInfo "  * simplepki_unit_tests.....: ${{ steps.simplepki_unit_tests.outcome }}"
        Write-ActionInfo "  * mockserver_unit_tests....: ${{ steps.mockserver_unit_tests.outcome }}"

    - name: Test - Integration Tests
      id: integration_tests
      if: ${{ !cancelled() && steps.unit_tests.outcome == 'success' && steps.simplepki_unit_tests.outcome == 'success' && steps.mockserver_unit_tests.outcome == 'success' }}
      uses: zyborg/dotnet-tests-report@v1
      with:
        project_path: ./test/ACMESharp.IntegrationTests
        no_restore: true
        report_name: integration_tests_${{ steps.prep_ci.outputs.os_label }}
        report_title: ACMESharp Core - Integration Tests
        github_token: ${{ secrets.GITHUB_TOKEN }}
        gist_name: acmesharpcore-integration_tests-${{ steps.prep_ci.outputs.os_label }}.md
        gist_badge_label: 'Base Unit Tests: %Counters_passed%/%Counters_total%'
        gist_token: ${{ secrets.GIST_TOKEN }}
